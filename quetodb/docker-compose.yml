services:

#===================================================
  seq:      
    image: datalust/seq  
    container_name: 'seq'    
    volumes:
      - seq_data:/data
    restart: always
    #restart: on-failure
    environment:
      - ACCEPT_EULA=Y      
    ports:
      - 8095:80
      - 5341:5341
    #command: apikey create -t newapikey --token 12345678901234567890 -s http://seq

#===================================================
  mysql80:
    image: mysql:8.0.30
    container_name: 'mysql80'
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment: 
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: mydb
        MYSQL_USER: user
        MYSQL_PASSWORD: user
    ports:
      - 3306:3306
    volumes: 
      - ./MySql/init:/docker-entrypoint-initdb.d
      - mysql-database:/var/lib/mysql
    healthcheck:
      test: "mysql -uroot -p$MYSQL_ROOT_PASSWORD mydb -e 'select 1'"
      #test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      #test: "mysql $$MYSQL_DATABASE -u$$MYSQL_USER -p$$MYSQL_PASSWORD -e 'SELECT 1;'"
      timeout: 20s
      retries: 20
      

#===================================================
#  sqlpad:
#    image: sqlpad/sqlpad
#    container_name: 'sqlpad'
#    #restart: always
#    environment: 
#      SQLPAD_ADMIN: admin@uc.no
#      SQLPAD_ADMIN_PASSWORD: 83Wrw50    
#    ports:
#      - 3400:3000
#    volumes: 
#      - /sqlpad:/var/lib/sqlpad
#    #  - ./MySql/init:/docker-entrypoint-initdb.d
#    #  - 'mysql-database:/var/lib/mysql'

      

#===================================================
  activemq01:
    image: symptoma/activemq:latest
    container_name: 'activemq01'
    environment:
      ACTIVEMQ_ADMIN_LOGIN: admin 
      ACTIVEMQ_ADMIN_PASSWORD: admin

    ports:
      - 61616:61616
      - 8161:8161
    volumes:
      - 'activemqdata:/data/activemq'
      - './activemq/log:/var/log/activemq'

#===================================================
  nodeapp01:
    container_name: nodeapp01
    #image: node:alpine3.15
    build: 
      context: ./nodeapp
      dockerfile: Dockerfile   
    tty: true
    stdin_open: true
    ports:
      - 3085:85
    depends_on:
      - "seq"
      - "mysql80"
      - "activemq01"
    volumes:
      - ./nodeapp/source:/source
      # Skal ikke mountes bruk "docker-compose up -V" etter endringer
      - '/source/node_modules'
    working_dir: /source
    command: node --inspect=2000 /source/server.js


#===================================================
  webjob:    
    #image: "mcr.microsoft.com/dotnet/sdk:7.0"
    build:
      # Either a path to a directory containing a Dockerfile
      context: ./cswebjob
      dockerfile: Dockerfile  
    container_name: csworker

    tty: true
    stdin_open: true
    
    # Configuration options that are applied at build time.    
    #ports:
      #- 3000:5059
      #- 3001:7212
    
    # Set environment variables
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_RUNNING_IN_CONTAINER=compose
    depends_on:
      - "seq"
      - "mysql80"
      - "activemq01"    
    # Mount host directories to container directories
    volumes:
      - ./cswebjob/source:/source
      # Disse skal ikke mountes bruk "docker-compose up -V" etter endringer
      - /source/Worker/obj
      - /source/Worker/bin
    #command: ["sh", "/source/start.sh"]
    working_dir: /source/Worker
    command: dotnet watch run 

#===================================================
  pyrestapi:   
    container_name: pyrestapi    
    build: 
      context: ./PyRest
      dockerfile: Dockerfile   
    tty: true        # docker run -t
    stdin_open: true  
    depends_on:
      - "mysql80"
      - "seq"
    # Map external port to internal port
    ports:
      #- 8099:80
      - "5000:5000"
      - "5678:5678"
    volumes:
      - ./PyRest/source:/source
    #restart: on-failure
    working_dir: /source
    #command: python /source/main.py
    command: python -m debugpy --listen 5678 /source/main.py

#===================================================
  reactspa:
    # Specify the image to start the container from
    image: node:alpine3.15
    container_name: reactspa
    tty: true
    # Expose ports (HOST:CONTAINER)
    ports:
      - 3000:3000
    # Set environment variables
    #environment:
    # Mount host directories to container directories
    volumes:
      - ./reactspa/source:/source
      - /source/reactspa/node_modules
    #command: ["sh", "/source/start.sh"]
     
volumes:
  seq_data:
  activemqdata:
  mysql-database:
